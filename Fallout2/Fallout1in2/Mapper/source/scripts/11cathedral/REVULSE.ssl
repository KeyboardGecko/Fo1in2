/*

   Master's Lair - "Revulse corridor"

*/

#include "define.h"
#include "maps/mstrlr34.h"

#define NAME                    SCRIPT_REVULSE

#include "command.h"

procedure start;
procedure blast_party;

variable ego_blast;
variable mult := 1;
variable per;
variable PICK;
variable test;

#define blast_party_dmg(obj) \
   if (obj != 0) then begin                                 \
      if (mult < 4) then begin                              \
         per := get_perception(obj);                        \
         ego_blast := random(1, per);                       \
         if (mult > 1) then begin                           \
            ego_blast := ego_blast + random(1, per);        \
         end                                                \
         if (mult > 2) then begin                           \
            ego_blast := ego_blast + random(1, per);        \
         end                                                \
      end                                                   \
      critter_dmg(obj, ego_blast, 0 bwor DMG_BYPASS_ARMOR); \
   end \
   noop

procedure start begin
end

procedure spatial_p_proc begin
   if source_is_dude then begin

      if (global_var(GVAR_PREVENT_REVULSION_DAMAGE) != 2) then begin
         per := dude_perception;
         if (local_var(0) <= map_var(MVAR_RESET)) then begin
            set_local_var(0, map_var(MVAR_RESET) + 1);
            test := per + map_var(MVAR_STAGE);

            if (random(1, 10) < test) then begin
               PICK := map_var(MVAR_STAGE);

               if dude_item(PID_PSYCHIC_NULLIFIER) then begin // Psychic Nullifier will prevent all damage
                  if map_var(MVAR_FELT_REVULSION) then begin
                     set_map_var(MVAR_FELT_REVULSION, 0);
                     display_msg(mstr(107));
                  end
               end
               else if (PICK == 0) then begin
                  display_msg(mstr(100));
                  set_map_var(MVAR_FELT_REVULSION, 1);
                  set_map_var(MVAR_STAGE, map_var(MVAR_STAGE) + 1);
               end
               else if (PICK == 1) then begin
                  mult := 1;
                  call blast_party; // Damage to the party. Moved here from below.

                  if not(dude_perk(PERK_mental_block)) then begin
                     display_msg(mstr(101));
                     ego_blast := random(1, per);
                     critter_dmg(dude_obj, ego_blast, 0 bwor DMG_BYPASS_ARMOR);
                  end
                  set_map_var(MVAR_STAGE, map_var(MVAR_STAGE) + 1);

                  // blast_party was originally after setting the MVAR.
                  // We moved it to the beginning so that party damage won't spam the message log.
                  //mult := 1;
                  //call blast_party;
               end
               else if (PICK == 2) then begin
                  mult := 2;
                  call blast_party;

                  if not(dude_perk(PERK_mental_block)) then begin
                     display_msg(mstr(102));
                     ego_blast := random(2, (2*per));
                     critter_dmg(dude_obj, ego_blast, 0 bwor DMG_BYPASS_ARMOR);
                  end
                  set_map_var(MVAR_STAGE, map_var(MVAR_STAGE) + 1);
               end
               else if (PICK == 3) then begin
                  mult := 3;
                  call blast_party;

                  if not(dude_perk(PERK_mental_block)) then begin
                     display_msg(mstr(103));
                     ego_blast := random(3, (3*per));
                     critter_dmg(dude_obj, ego_blast, 0 bwor DMG_BYPASS_ARMOR);
                  end
                  set_map_var(MVAR_STAGE, map_var(MVAR_STAGE) + 1);
               end
               else if (PICK == 4) then begin
                  mult := 3;
                  call blast_party;

                  if not(dude_perk(PERK_mental_block)) then begin
                     display_msg(mstr(104));
                     ego_blast := random(3, (3*per));
                     critter_dmg(dude_obj, ego_blast, 0 bwor DMG_BYPASS_ARMOR);
                     critter_injure(dude_obj, DAM_BLIND);
                     set_critter_stat(dude_obj, STAT_pe, -1);
                     display_msg(mstr(250));
                  end
                  set_map_var(MVAR_STAGE, map_var(MVAR_STAGE) + 1);
               end
               else if (PICK == 5) then begin
                  mult := 4;
                  call blast_party;

                  if not(dude_perk(PERK_mental_block)) then begin
                     display_msg(mstr(105));
                     ego_blast := 1;
                     if has_rep_berserker then begin
                        ego_blast := ego_blast + 15;
                     end
                     if has_rep_childkiller then begin
                        ego_blast := ego_blast + 20;
                     end
                     critter_dmg(dude_obj, ego_blast, 0 bwor DMG_BYPASS_ARMOR);
                     set_critter_stat(dude_obj, STAT_iq, -1);
                     display_msg(mstr(251));
                  end
                  set_map_var(MVAR_STAGE, map_var(MVAR_STAGE) + 1);
               end
               else if (PICK == 6) then begin
                  if not(dude_perk(PERK_mental_block)) then begin
                     display_msg(mstr(106));
                     set_critter_stat(dude_obj, STAT_pe, -1);
                     set_critter_stat(dude_obj, STAT_iq, -1);
                     display_msg(mstr(250));
                     display_msg(mstr(251));
                  end
               end
            end
         end
      end

   end
end

procedure blast_party begin
   ego_blast := 1;
   if has_rep_berserker then begin
      ego_blast := ego_blast + 7;
   end
   if has_rep_childkiller then begin
      ego_blast := ego_blast + 10;
   end

   blast_party_dmg(Ian_ptr);
   blast_party_dmg(Tycho_ptr);
   blast_party_dmg(Katja_ptr);
   blast_party_dmg(Tandi_ptr);
end
