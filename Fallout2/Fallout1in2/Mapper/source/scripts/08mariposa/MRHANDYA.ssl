/*

   Mariposa - two-armed brainbots in Military Base, Vats level 2

*/

/* Include Files */
#include "define.h"
#include "area/mbase.h"

#define NAME                    SCRIPT_MRHANDYA

#include "command.h"
#include "sfall/sfall.h"

procedure start;
procedure map_update_p_proc;
procedure critter_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure timed_event_p_proc;

procedure Repair_Attempt;

#define LVAR_RobotStatus   (0)
#define LVAR_RobotBroken   (1)

import variable valid_target;

variable tmp_hostile;
variable initial := 0;

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_NECROPOLIS_MUTANT);
      set_self_ai(AI_ROBOTS);
      add_timer_event(self_obj, game_ticks(random(1, 3)), 1);
   end
end

procedure map_update_p_proc begin
   if get_robo_attack_large_pests then begin
      set_self_team(TEAM_ROBOBRAINS);
   end
   else if (self_team != TEAM_NECROPOLIS_MUTANT) then begin
      set_self_team(TEAM_NECROPOLIS_MUTANT);
   end
end

procedure combat_p_proc begin
   if mbase_full_alert and get_robo_full_sensors and get_robo_attack_large_pests then begin
      set_self_team(TEAM_PLAYER);
   end
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   if get_robo_minimal_sensors then begin
      if ((critter_state(self_obj) bwand DAM_BLIND) == FALSE) then begin
         critter_injure(self_obj, DAM_BLIND);
      end
   end

   // Cripple one leg if not max movement, and cripple two legs if min movement
   if (global_var(GVAR_ROBCTRL_MOVEMENT_HOWMUCH) != robo_max_movement) then begin
      if ((critter_state(self_obj) bwand DAM_CRIP_LEG_LEFT) == FALSE) then begin
         critter_injure(self_obj, DAM_CRIP_LEG_LEFT);
      end
   end
   if get_robo_min_movement then begin
      if ((critter_state(self_obj) bwand DAM_CRIP_LEG_RIGHT) == FALSE) then begin
         critter_injure(self_obj, DAM_CRIP_LEG_RIGHT);
      end
   end

   if mbase_full_alert then begin
      if get_robo_full_sensors then begin
         if get_robo_attack_unauth_pests then begin
            if (self_can_see_dude) then begin
               tmp_hostile := 1;
            end
         end
         else if get_robo_attack_all_pests then begin
            if (obj_can_see_obj(self_obj, valid_target)) then begin
               attack(valid_target);
            end
            else if (self_can_see_dude) then begin
               attack(dude_obj);
            end
         end
         else if get_robo_attack_large_pests then begin
            if (obj_can_see_obj(self_obj, valid_target)) then begin
               attack(valid_target);
            end
         end
         else if get_robo_attack_small_pests then begin
            if (self_can_see_dude) then begin
               tmp_hostile := 1;
            end
         end
      end
      if (global_var(GVAR_ROBCTRL_MOVEMENT_HOWMUCH) != robo_min_movement) then begin
         self_walk_to_tile(tile_num_in_direction(self_tile, random(0, 5), random(1, 3)));
      end
   end
end

procedure description_p_proc begin
   script_overrides;
   if (local_var(LVAR_RobotStatus)) then begin
      display_msg(message_str(SCRIPT_MRHANDYA, 100));
   end
   else begin
      display_msg(message_str(SCRIPT_MRHANDYA, 101));
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_REPAIR) then begin
      if (local_var(LVAR_RobotStatus) == 0) then begin
         call Repair_Attempt;
         script_overrides;
      end
   end
end

procedure Repair_Attempt begin
   variable LVar0 := 0;
   game_time_advance(game_ticks(1200));
   LVar0 := roll_vs_skill(dude_obj, SKILL_REPAIR, 0);
   if (not(local_var(LVAR_RobotBroken)) and is_success(LVar0)) then begin
      display_msg(message_str(SCRIPT_MRHANDYA, 102));
      set_local_var(LVAR_RobotStatus, 1);
   end
   else begin
      display_msg(message_str(SCRIPT_MRHANDYA, 103));
      set_local_var(LVAR_RobotBroken, 1);
   end
end

procedure timed_event_p_proc begin
variable critArray;
variable obj;

   if mbase_full_alert and get_robo_full_sensors and (get_robo_attack_all_pests or get_robo_attack_large_pests) then begin
      set_self_team(TEAM_ROBOBRAINS);

      critArray := list_as_array(LIST_CRITTERS);
      foreach (obj in critArray) begin
         if (get_team(obj) == TEAM_NECROPOLIS_MUTANT) then begin
            if obj_can_see_obj(self_obj, obj) then begin
               attack(obj);
               break;
            end
         end
      end
   end
   flush_add_timer_event(self_obj, game_ticks(random(1, 3)), 1);
end
