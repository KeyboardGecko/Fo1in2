/*

   Military Base - Force Field emitters

   NOTE:

      Template script!
      This is included in other MBase Force Field (emitter) scripts.

*/

#include "define.h"
#include "area/mbase.h"
//#include "maps/mbstrg12.h"

#ifndef NAME
   #define NAME                     SCRIPT_EMITER1A
   #define FField_Ptr               Field1a_Ptr
   #define FField_MVAR              16
#endif

#include "command.h"

procedure start;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure timed_event_p_proc;

procedure repair_emitter;

#define FIELD_DOWN_TIME       (4)

#define give_disable_exp      if (local_var(LVAR_Disabled_EXP) == 0) then begin  \
                                 set_local_var(LVAR_Disabled_EXP, 1);            \
                                 give_xp(50);                                    \
                              end

#define EVENT_REENABLE_FIELD  (1)

#define LVAR_FF_Status        (0)
#define LVAR_Disabled_EXP     (1)

import variable FField_Ptr;

variable bonus := 0;

procedure start begin
end

procedure use_p_proc begin
   script_overrides;
   display_msg(message_str(SCRIPT_EMITER1A, 100));
end

procedure use_obj_on_p_proc begin
   variable Item := obj_pid(obj_being_used_with);

   if (Item == PID_MULTI_TOOL or Item == PID_SUPER_TOOL_KIT) then begin
      bonus := 0;
      call repair_emitter;
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_REPAIR) then begin
      bonus := -20;
      call repair_emitter;
   end
end

procedure damage_p_proc begin
   // Check if damage is to the emitter and not the terminal nearby
   if (self_pid == PID_EMITTER_MBASE_NS or self_pid == PID_EMITTER_MBASE_EW) then begin
      if (dude_skill_success(SKILL_TRAPS, 0)) then begin
         set_global_var(GVAR_VATS_ALERT, 1);
         display_msg(message_str(SCRIPT_EMITER1A, 102));
         set_emitter_destroyed
      end
      else begin
         set_map_var(FField_MVAR, FORCE_DISABLED_TEMP);
         set_obj_invisible(FField_Ptr);
         display_msg(message_str(SCRIPT_EMITER1A, 101));
      end
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == EVENT_REENABLE_FIELD) then begin
      if (FField_Ptr != 0) then begin
         if get_force_fields_on then begin
            set_obj_visible(FField_Ptr);
            set_map_var(FField_MVAR, ENABLED);
         end
      end
   end
end

procedure repair_emitter begin
   script_overrides;
   if (dude_skill_success(SKILL_REPAIR, bonus)) then begin
      if ((map_var(FField_MVAR) == ENABLED) or (map_var(FField_MVAR) == FORCE_ENABLED)) then begin
         display_msg(message_str(SCRIPT_EMITER1A, 103));
         set_obj_invisible(FField_Ptr);

         give_disable_exp

         if get_force_fields_on then
            set_map_var(FField_MVAR, FORCE_DISABLED);
         else
            set_map_var(FField_MVAR, DISABLED);

         flush_add_timer_event(self_obj, game_ticks(FIELD_DOWN_TIME), EVENT_REENABLE_FIELD);
      end
      else begin
         set_obj_visible(FField_Ptr);
         display_msg(message_str(SCRIPT_EMITER1A, 105));
         set_map_var(FField_MVAR, FORCE_ENABLED);
      end
   end
   else begin
      display_msg(message_str(SCRIPT_EMITER1A, 104));
   end
end
